{"version":3,"sources":["Search.js","MoviesList.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["withRouter","props","onSubmit","e","preventDefault","console","log","handleSubmit","history","push","className","placeholder","type","value","text","onChange","handleinput","MoviesList","a","movies","map","movie","key","imdbID","to","src","Poster","Title","Movie","useState","setmovie","movieID","useParams","useEffect","movieurl","axios","get","then","repos","moviedata","data","movieData","Actors","Plot","imdbRating","Released","BoxOffice","customHistory","createBrowserHistory","App","state","movieUrl","handleInput","bind","getMoviesData","this","setState","target","apiUrl","allmovies","Search","Response","exact","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.07e91b14.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Search.css'\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nfunction Search(props) {\r\n    const handleSubmit= (e) => {\r\n        e.preventDefault();\r\n        console.log(e);\r\n        props.handleSubmit(e);\r\n        props.history.push(\"/movie-review\");\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <form onSubmit={e => handleSubmit(e)}>\r\n            <input className=\"ipt\" placeholder=\"movie...\" type=\"text\" value={props.text || \"\"} \r\n            onChange={props.handleinput} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default withRouter(Search);","import React from 'react';\r\nimport \"./MoviesList.css\"\r\nimport { Link } from 'react-router-dom';\r\nfunction MoviesList(props) {\r\n    const movies=props.movies;\r\n    const a=movies.map(movie => \r\n        {   \r\n            return <div className=\"movie\" key={movie.imdbID}>\r\n                <Link to={`/${movie.imdbID}`}>\r\n                    <img src={movie.Poster} />\r\n                </Link>\r\n                    <p>{movie.Title}</p>\r\n                </div>\r\n        })\r\n    return (\r\n        <div className=\"movieslist\">\r\n            {a}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoviesList;","import React, { useState,useEffect } from 'react';\r\nimport { Link,useParams } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport \"./Movie.css\"\r\nfunction Movie(props) {\r\n    const [movie,setmovie]=useState({});\r\n    let { movieID } = useParams();\r\n    useEffect(() => {\r\n            console.log(movieID);\r\n            const movieurl = `https://www.omdbapi.com/?&plot=full&apikey=ed691149&i=${movieID}`;\r\n            axios.get(movieurl).then((repos) => {\r\n              const moviedata = repos.data;\r\n              console.log(moviedata);\r\n              setmovie(\r\n                moviedata\r\n              )});               \r\n    },[]);\r\n    const movieData=<div>\r\n        <Link to=\"/movie-review\" className=\"lk\">\r\n        <div className=\"box\">\r\n            <div className=\"hm\">\r\n          <h1 className=\"home\">home</h1>\r\n          </div>\r\n          </div>\r\n        </Link>\r\n        <img src={movie.Poster} />\r\n        <h1>Actors</h1> <div className=\"jtext\">{movie.Actors}</div>\r\n        <h1>Description</h1> <div className=\"jtext\">{movie.Plot}</div> \r\n        <h1>Rating </h1> <div className=\"jtext\">{movie.imdbRating}</div>\r\n        <h1>Released Date </h1> <div className=\"jtext\">{movie.Released}</div>\r\n        <h1>BoxOffice Collection </h1> <div className=\"jtext\">{movie.BoxOffice}</div>\r\n        </div>\r\n    return (\r\n        <div>\r\n            {movieData}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Movie;","import React from 'react';\r\nimport './App.css';\r\nimport Search from './Search';\r\nimport axios from 'axios'\r\nimport MoviesList from './MoviesList'\r\nimport Movie from './Movie'\r\nimport { createBrowserHistory } from \"history\";\r\nimport { useHistory,withRouter } from \"react-router-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link,\r\n  Redirect\r\n} from \"react-router-dom\";\r\nconst customHistory = createBrowserHistory();\r\n\r\nclass App extends React.Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state={\r\n      text:'',movies: [],movie: [],movieUrl:''\r\n    }\r\n    this.handleInput=this.handleInput.bind(this);\r\n    this.handleSubmit=this.handleSubmit.bind(this);\r\n    this.getMoviesData=this.getMoviesData.bind(this);\r\n  }\r\n  handleInput(e){\r\n    this.setState({\r\n      text:e.target.value\r\n    })\r\n  }\r\n  handleSubmit(e){\r\n    e.preventDefault();\r\n    //history.push(\"/movie-review\");\r\n      this.setState({\r\n      text:e.target.value,movieUrl:\"/\"\r\n    })\r\n    this.getMoviesData();\r\n  }\r\n  \r\n  getMoviesData(){\r\n    //setAppState({ loading: true });\r\n    const apiUrl = `https://www.omdbapi.com/?&plot=full&apikey=ed691149&s=${this.state.text}`;\r\n    axios.get(apiUrl).then((repos) => {\r\n      const allmovies = repos.data.Search;\r\n      console.log(allmovies);\r\n      if(repos.data.Response==\"True\"){\r\n      this.setState({\r\n        movies: allmovies,\r\n      })}\r\n      //setAppState({ loading: false, repos: allRepos });\r\n    });\r\n  }\r\n  componentDidMount(){\r\n    console.log(this.props,\"abs\")\r\n  }\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"header\">\r\n        <div>\r\n        <h1>Movie Information</h1>\r\n        </div>\r\n      </header>\r\n      <Router history={customHistory}>\r\n        \r\n        <div>\r\n        <Search handleinput={this.handleInput} text={this.state.text} handleSubmit={this.handleSubmit} />\r\n          <Switch>\r\n            <Route exact path=\"/movie-review\">\r\n              <MoviesList movies={this.state.movies} />\r\n            </Route>\r\n            <Route path=\"/:movieID\">\r\n              <Movie  />\r\n            </Route>\r\n          </Switch>\r\n        </div>\r\n      </Router>\r\n    </div>\r\n  );\r\n  }\r\n  }\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}