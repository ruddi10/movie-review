{"version":3,"sources":["Search.js","MoviesList.js","Movie.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","onSubmit","handleSubmit","className","placeholder","type","value","text","onChange","handleinput","MoviesList","a","movies","map","movie","key","imdbID","to","src","Poster","onClick","handleClick","Title","Movie","movieData","Actors","Plot","imdbRating","Released","BoxOffice","App","id","console","log","movieUrl","axios","get","then","repos","moviedata","data","setState","state","handleInput","bind","getMoviesData","e","this","target","preventDefault","apiUrl","allmovies","Response","exact","path","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e650f7e4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Search.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <div>\r\n            <form onSubmit={props.handleSubmit}>\r\n            <input className=\"ipt\" placeholder=\"movie...\" type=\"text\" value={props.text || \"\"} onChange={props.handleinput} />\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport \"./MoviesList.css\"\r\nimport { Link } from 'react-router-dom';\r\nfunction MoviesList(props) {\r\n    const movies=props.movies;\r\n    const a=movies.map(movie => \r\n        { \r\n            return <div className=\"movie\" key={movie.imdbID}>\r\n                <Link to={movie.imdbID}>\r\n                    <img src={movie.Poster} onClick={() => props.handleClick(movie.imdbID)} />\r\n                </Link>\r\n                    <p>{movie.Title}</p>\r\n                </div>\r\n        })\r\n    return (\r\n        <div className=\"movieslist\">\r\n            {a}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MoviesList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport \"./Movie.css\"\r\nfunction Movie(props) {\r\n    const movie=props.movie;\r\n    const movieData=<div>\r\n        <Link to=\"/\" className=\"lk\">\r\n        <div className=\"box\">\r\n            <div className=\"hm\">\r\n          <h1 className=\"home\">home</h1>\r\n          </div>\r\n          </div>\r\n        </Link>\r\n        <img src={movie.Poster} />\r\n        <h1>Actors</h1> <div className=\"jtext\">{movie.Actors}</div>\r\n        <h1>Description</h1> <div className=\"jtext\">{movie.Plot}</div> \r\n        <h1>Rating </h1> <div className=\"jtext\">{movie.imdbRating}</div>\r\n        <h1>Released Date </h1> <div className=\"jtext\">{movie.Released}</div>\r\n        <h1>BoxOffice Collection </h1> <div className=\"jtext\">{movie.BoxOffice}</div>\r\n        </div>\r\n    return (\r\n        <div>\r\n            {movieData}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Movie;","import React from 'react';\nimport './App.css';\nimport Search from './Search';\nimport axios from 'axios'\nimport MoviesList from './MoviesList'\nimport Movie from './Movie'\nimport { createHashHistory } from 'history'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  Redirect\n} from \"react-router-dom\";\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state={\n      text:'',movies: [],movie: [],movieUrl:''\n    }\n    this.handleInput=this.handleInput.bind(this);\n    this.handleSubmit=this.handleSubmit.bind(this);\n    this.getMoviesData=this.getMoviesData.bind(this);\n    this.handleClick=this.handleClick.bind(this);\n  }\n  \n  handleInput(e){\n    this.setState({\n      text:e.target.value\n    })\n  }\n  handleSubmit(e){\n    e.preventDefault();\n      this.setState({\n      text:e.target.value,movieUrl:\"/\"\n    })\n    this.getMoviesData();\n  }\n  \n  getMoviesData(){\n    //setAppState({ loading: true });\n    const apiUrl = `http://www.omdbapi.com/?&plot=full&apikey=ed691149&s=${this.state.text}`;\n    axios.get(apiUrl).then((repos) => {\n      const allmovies = repos.data.Search;\n      console.log(allmovies);\n      if(repos.data.Response==\"True\"){\n      this.setState({\n        movies: allmovies,\n      })}\n      //setAppState({ loading: false, repos: allRepos });\n    });\n  }\n  handleClick=(id)=> {\n    console.log(id);\n    const movieUrl = `http://www.omdbapi.com/?&plot=full&apikey=ed691149&i=${id}`;\n    axios.get(movieUrl).then((repos) => {\n      const moviedata = repos.data;\n      console.log(moviedata);\n      this.setState({\n        movie: moviedata,movieUrl:(`/${moviedata.imdbID}`)\n      })\n  })\n}\n\n\n  render(){\n  return (\n    <div className=\"App\">\n      <header className=\"header\">\n        <div>\n        <h1>Movie Review</h1>\n        </div>\n      </header>\n      <Router>\n        \n        <div>\n          <Switch>\n            <Route exact path=\"/\">\n            <Search handleinput={this.handleInput} text={this.state.text} handleSubmit={this.handleSubmit} />\n            <MoviesList movies={this.state.movies} handleClick={this.handleClick} />\n            </Route>\n            <Route exact path={this.state.movieUrl}>\n              <Movie movie={this.state.movie} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n  }\n  }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}